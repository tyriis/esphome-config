# 2022-06-04

# thanks to https://gist.github.com/jungervin/8cf196d58637fdfd16d317b794123744
substitutions:
  host_name: switch-irpanel-1
  device_name: switch_irpanel_1
  friendly_name: Switch IRPanel 1

esphome:
  name: ${host_name}
  platform: ESP8266
  board: esp8285

# Enable logging
logger:
  level: INFO
  logs:
    mqtt.component: INFO
    mqtt.client: INFO

# Enable Home Assistant API
api:
  password: !secret api_password
  encryption:
    key: !secret api_encription_key

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  use_address: 192.168.1.132
  # domain: .home

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "ESPHome ${device_name} Hotspot"
    password: !secret ap_password

captive_portal:

# MQTT
mqtt:
  # disable mqtt logging
  log_topic:
  id: nqtt_client
  broker: mqtt.home
  client_id: esphome_${device_name}
  discovery: false
  discovery_retain: true
  topic_prefix: ESPHome/${device_name}
  birth_message:
    topic: ESPHome/${device_name}/state
    payload: 1
    qos: 2
    retain: true
  shutdown_message:
    topic: ESPHome/${device_name}/state
    payload: 0
    qos: 2
    retain: true
  will_message:
    topic: ESPHome/${device_name}/state
    payload: 0
    qos: 2
    retain: true

  on_message:
  - topic: ESPHome/${device_name}/switch/${device_name}_relay/set
    payload: "ON"
    then:
    - switch.turn_on: relay
  - topic: ESPHome/${device_name}/switch/${device_name}_relay/set
    payload: "OFF"
    then:
    - switch.turn_off: relay

# web_server:
#   port: 80
#   auth:
#     username: !secret web_username
#     password: !secret web_password
#   ota: false

# expose prometheus data
prometheus:

text_sensor:
  # wifi info
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} WiFi IP"
    # ssid:
    #   name: "WiFi SSID ${friendly_name}"
    # bssid:
    #   name: "WiFi BSSID ${friendly_name}"
  # esphome version info
  - platform: version
    name: "${friendly_name} Firmware"

  - platform: template
    name: "${friendly_name} MAC Address"
    lambda: 'return {WiFi.macAddress().c_str()};'
    icon: mdi:fingerprint
    update_interval: 60s
    internal: true

  - platform: template
    name: "${friendly_name} Wifi Strength"
    id: ${device_name}_wifi_strength
    icon: "mdi:wifi"
    lambda: |-
      if (id(${device_name}_wifi_signal).state > -50 ) {
        return {"Excellent"};
      } else if (id(${device_name}_wifi_signal).state > -60) {
        return {"Good"};
      } else if (id(${device_name}_wifi_signal).state > -70) {
        return {"Fair"};
      } else if (id(${device_name}_wifi_signal).state < -70) {
        return {"Weak"};
      } else {
        return {"None"};
      }
    update_interval: 900s

sensor:
  - platform: uptime
    name: "${friendly_name} Uptime"
    id: uptime_sensor
    update_interval: 60s
    disabled_by_default: true
    # on_raw_value:
    #   then:
    #     - text_sensor.template.publish:
    #         id: uptime_human
    #         state: !lambda |-
    #           int seconds = round(id(uptime_sensor).raw_state);
    #           int days = seconds / (24 * 3600);
    #           seconds = seconds % (24 * 3600);
    #           int hours = seconds / 3600;
    #           seconds = seconds % 3600;
    #           int minutes = seconds /  60;
    #           seconds = seconds % 60;
    #           return (
    #             (days ? to_string(days) + "d " : "") +
    #             (hours ? to_string(hours) + "h " : "") +
    #             (minutes ? to_string(minutes) + "m " : "") +
    #             (to_string(seconds) + "s")
    #           ).c_str();
  - platform: wifi_signal
    name: "${friendly_name} WiFi Signal"
    id: ${device_name}_wifi_signal
    update_interval: 900s
    internal: true
  - platform: hlw8012
    sel_pin:
      number: GPIO12
      inverted: True
    cf_pin: GPIO05
    cf1_pin: GPIO14
    # Higher value gives lower watt readout
    current_resistor: 0.00091
    # Lower value gives lower voltage readout
    voltage_divider: 924
    current:
      name: "${friendly_name} current"
      unit_of_measurement: A
    voltage:
      name: "${friendly_name} voltage"
      unit_of_measurement: V
    power:
      name: "${friendly_name} power"
      unit_of_measurement: W
      id: "bw2_power"
    change_mode_every: 8
    update_interval: 10s
  - platform: total_daily_energy
    name: "${friendly_name} Total Daily Energy"
    power_id: "bw2_power"
    filters:
    # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    unit_of_measurement: kWh

time:
  - platform: homeassistant
    id: homeassistant_time

binary_sensor:
  - platform: gpio
    # https://esphome.io/components/binary_sensor/gpio.html
    pin:
      number: GPIO13
      inverted: True
    id: button
    name: "${friendly_name} Button"
    on_press:
      - switch.toggle: relay
    # internal: True
  # - platform: gpio
  #   pin:
  #     number: GPIO0
  #     mode: INPUT_PULLUP
  #     inverted: True
  #   name: "${friendly_name} Touchpad"
  #   on_press:
  #     then:
  #       - switch.toggle: relay_1
  - platform: status
    name: "${friendly_name} Status"

switch:
  - platform: gpio
    name: "${friendly_name} Relay"
    id: relay
    pin: GPIO15
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
    # - delay: 250ms
    # - light.turn_on: red_light
    - light.turn_on: blue_light
    on_turn_off:
    # - delay: 250ms
    # - light.turn_off: red_light
    - light.turn_off: blue_light
  # - platform: gpio
  #   name: "${friendly_name} Blue LED"
  #   pin: GPIO1
  #   inverted: True
  #   restore_mode: RESTORE_DEFAULT_OFF
  # - platform: gpio
  #   name: "${friendly_name} Red LED"
  #   pin: GPIO13
  #   inverted: True
  #   restore_mode: RESTORE_DEFAULT_OFF


  - platform: restart
    name: "${friendly_name} Restart"
    disabled_by_default: true

output:
  # Register the blue LED as a dimmable output ....
  - platform: esp8266_pwm
    id: blue_led
    pin: GPIO2
    inverted: True
  # Register the red LED as a dimmable output ....
  # - platform: esp8266_pwm
  #   id: red_led
  #   pin: GPIO0
  #   inverted: True

light:
  # ... and then make a light out of it.
  - platform: monochromatic
    id: blue_light
    name: "${friendly_name} blue LED"
    output: blue_led
    default_transition_length: 1ms
    disabled_by_default: true
  # ... and then make a light out of it.
  # - platform: monochromatic
  #   id: red_light
  #   name: "${friendly_name} red LED"
  #   output: red_led
  #   default_transition_length: 500ms
  #   disabled_by_default: true

status_led:
  # https://esphome.io/components/status_led
  pin:
    number: GPIO0
    inverted: True